newdata <- data.frame(wt=mean(wt))
fit <- lm(mpg ~ wt)
predict(fit, newdata, interval="confidence")
newdata <- data.frame(wt=3)
predict(fit, newdata, interval="prediction")
wt
predict(fit, newdata, interval="prediction")
newdata
data(mtcars)
mtcars$wt
wt <- mtcars$wt
fit <- lm(mpg~wt)
newdata <- data.frame(wt=mean(wt))
predict(fit, newdata, interval="confidence")
newdata <- data.frame(wt=3)
predict(fit, newdata, interval="prediction")
wt2
summary(lm(mpg~wt2))
summary(lm(mpg~wt))
wt3 <- wt*2
summary(lm(mpg~wt3))
summary(lm(mpg~wt2))
summary(lm(mpg~wt/2))
summary(lm(mpg~wt2))
wt2
wt2 <- mtcars$wt/2
wt2
summary(lm(mpg~wt2))
fit2 <- lm(mpg~wt2)
-10.689+c(-1,1)*1.118*qt(0.975, df=fit2$df)
wt4 = wt + 100
summary(fit(lm(mpg~wt))
)
summary((lm(mpg~wt))
)
summary(lm(mpg~wt4))
37.2851 - (-5.3445)*100
1/0.75
summary(lm(mpg~wt))
sqrt(0.75)
wt
summary(lm(mpg~wt))
load(mtcars)
load(mtcars)
data(mtcars)
str(mtcars)
mtcars?
Ã±
?mtcars
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
str(mtcars)
library(ggplot2)
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
str(mtcars)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(am, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=am, main="Mileage by am",
xlab="Type of transmission", ylab="Miles per Gallon")
qplot(am, mpg, data=mtcars, geom=c("boxplot"),
fill=am, main="Mileage by am",
xlab="Type of transmission", ylab="Miles per Gallon")
pairs(mtcars, panel = panel.smooth, main = "")
qplot(am, mpg, data=mtcars, geom=c("boxplot"),
fill=am, main="Mileage by am",
xlab="Type of transmission", ylab="Miles per Gallon")
fit <- lm(mpg ~ ., data=mtcars)
summary(fit)
fit2 <- lm(mpg ~ hp + wt + am, data=mtcars)
summary(fit2)
fit3 <- lm(mpg ~ hp + wt, data=mtcars)
summary(fit3)
plot(fit3)
layout(matrix(c(1, 2, 3, 4), 2, 2))
plot(modelfinal)
layout(matrix(c(1, 2, 3, 4), 2, 2))
plot(fit3)
qplot(am, mpg, data=mtcars, geom=c("boxplot"),
+       fill=am, main="Mileage by am",
+       xlab="Type of transmission", ylab="Miles per Gallon")
qplot(am, mpg, data=mtcars, geom=c("boxplot"), fill=am, main="Mileage by am", xlab="Type of transmission", ylab="Miles per Gallon")
confint(fit3)
summary(fit3)
?mtcars
mtcars$hp
confint(fit2)
confint(fit3)
summary(fit3)$coefficients
lm(mpg ~ ., data=mtcars)
summary(fit1)
fit1 <- lm(mpg ~ ., data=mtcars)
summary(fit1)
clear(fit)
rm(fit)
rm(fit1)
rm(fit12)
rm(fit2)
rm(fit3)
str(mtcars)
summary(lm(mpg ~ cyl + wt))
summary(lm(mpg ~ cyl + wt, data="mtcars"))
summary(lm(mpg ~ cyl + wt, data=mtcars))
summary(lm(mpg ~ cyl, data=mtcars))
summary(lm(mpg ~ cyl + wt + cyl*wt, data=mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
round(hatvalues(fit))
round(hatvalues(fit)[1:5,2],3)
round(hatvalues(fit)[1:5],3)
round(dfbetas(fit)[1:5],3)
round(dfbetas(fit)[1:5],4)
summary(fit)
dfbetas(fit)
x[-5]
x<- x[-5]
y <- y[-5]
fit <- lm(y~x)
summary(fit)
summary(lm(mpg ~ cyl + wt + cyl:wt, data=mtcars))
library(mass)
data(shuttle)
library(MASS)
data(shuttle)
summary(shuttle)
myfit <- glm(factor(use) ~ factor(wind) - 1, data=shuttle, family="binomial")
exp(coef(myfit)[2] - coef(myfit)[1])
myfit2 <- glm(factor(use) ~ factor(wind) + factor(magn) - 1, data=shuttle, family="binomial")
exp(coef(myfit2)[2] - coef(myfit2)[1])
round(exp(coef(myfit2)[2] - coef(myfit2)[1]), 3)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(hmisc)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
plot(training$compressiveStrength,training$row.names)
summary(training)
library(Hmisc)
splitOn <- cut2(training$Age, g = 4)
splitOn
splitOn <- mapvalues(splitOn,
from = levels(factor(splitOn)),
to = c("red", "blue", "yellow", "green"))
library(plyr)
splitOn <- mapvalues(splitOn,
from = levels(factor(splitOn)),
to = c("red", "blue", "yellow", "green"))
splitON
splitOn
plot(training$CompressiveStrength, col = splitOn)
summary(training)
plot(training$CompressiveStrength, col = Cement)
plot(training$CompressiveStrength, col = splitOn)
plot(training$CompressiveStrength, col = FlyAsg)
plot(training$CompressiveStrength, col = FlyAsh)
plot(training$CompressiveStrength, col = traning$FlyAsh)
plot(training$CompressiveStrength, col = training$FlyAsh)
splitOn <- cut2(training$FlyAsh, g = 4)
plot(training$CompressiveStrength, col = splitOn)
hist(training$superPlasticizer)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_variables <- grep("^IL", names(training), value = TRUE)
preProc <- preProcess(training[, IL_variables], method = "pca", thresh = 0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
# create a new DF of predictors and diagnosis
df <- data.frame(diagnosis, predictors_IL)
# create a training and testing set from this DF
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confusion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with PCA
modelFit <- train(training$diagnosis ~ ., method = "glm", data = training,
preProcess = "pca",
Control = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
install.packages("e1071")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
# create a new DF of predictors and diagnosis
df <- data.frame(diagnosis, predictors_IL)
# create a training and testing set from this DF
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confusion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with PCA
modelFit <- train(training$diagnosis ~ ., method = "glm", data = training,
preProcess = "pca",
Control = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
warnings()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
# create a new DF of predictors and diagnosis
df <- data.frame(diagnosis, predictors_IL)
# create a training and testing set from this DF
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confusion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with PCA
modelFit <- train(training$diagnosis ~ ., method = "glm", data = training,
preProcess = "pca",
Control = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model3 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = "glm", family="binomial")
prediction <- predict(model3, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model3 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = "glm", family="binomial")
prediction <- predict(model3, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(testSA$chd, prediction)
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
prediction1 <- predict(model3, trainSA)
prediction2 <- predict(model3, testSA)
missClass(trainSA$chd, prediction1)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
summary(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelo <- train(y ~ ., data = training, method = "rf")
modelo <- train(y ~ ., data = vowel.train, method = "rf")
varlmp(modelo)
library(caret)
varlmp(modelo)
varImp(modelo)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelo <- train(y ~ ., data = vowel.train, method = "rf")
varImp(modelo)
modelo <- train(y ~ ., data = vowel.train, method = "rf", prox=TRUE)
varImp(modelo)
data(cars)
cars
View(cars)
data(cars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shiny")
library(caret)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am,levels=c(0,1),labels=c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$carb <- as.factor(mtcars$carb)
save.image("~/workspace.RData")
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am,levels=c(0,1),labels=c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$carb <- as.factor(mtcars$carb)
inTrain <- createDataPartition(y=mtcars$mpg, p=0.7, list=FALSE)
train <- mtcars[inTrain, ]
test <- mtcars[-inTrain,]
head(train)
lm <- lm(mpg ~ hp + wt + am, data=mtcars)
summary(lm)
mtcars
View(mtcars)
newdata = data.frame(hp=110, wt=2.620, am='Manual')
predict(lm, newdata, interval="predict")
summary(mtcars$hp)
summary(mtcars$wt)
summary(mtcars$am)
str(mtcars$am)
mtcars$am
setwd("~/Coursera/9. Developing Data Products/Project")
setwd("~/Coursera/9. Developing Data Products")
setwd("~/Coursera/9. Developing Data Products/Project")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(lm)
plot(lm)
plot(lm)
runApp()
qplot(mpg, hp, colour=wt, data=mtcars)
qplot(mpg, wt, colour=hp, data=mtcars)
predMpg <- predict(lm, newdata, interval="predict")
predMpg <- predict(lm, newdata)
predMpg
qplot(predMpg, wt, colour=hp, data=newdata)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyapps")
library(shinyapps)
install.packages("devtools")
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='carlosmt87', token='6EE0DF1EFB44661BAB6353748CA93F6B', secret='mlhCakWkbiH+AFcwyFhZgMx6NN+v/5VV5nGpOP+Z')
library(shinyapps)
shinyapps::deployApp()
install_github('slidify', 'ramnath')
library(devtools)
install_github('slidify', 'ramnath')
install_github('slidify', 'ramnath/slidify')
install_github('slidify', 'ramnath/slidify/slidify')
install_github('slidify', 'ramnath/')
install_github('slidify', 'ramnathv')
library(slidify)
setwd("~/Coursera/9. Developing Data Products/Project/presentation")
author("MPG Prediction Shiny app")
setwd("~/Coursera/9. Developing Data Products/Project/presentation/MPG Prediction Shiny app")
slidify("index.Rmd")
install_github('slidifyLibraries', 'ramnathv')
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
summary(lm$coefficients)
coef(lm)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'MPG Prediction Shiny App', 'index.html', host = 'rpubs')
publish(title = 'MPG Prediction Shiny App', 'index.html', host = 'rpubs')
publish(user = "carlosmt87", repo = "dataProducts")
git config --global user.email "carlosmt87@gmail.com"
publish(user = "carlosmt87", repo = "dataProducts")
ls
dir
publish(user = "carlosmt87", repo = "dataProducts")
